/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"AresBattle","desc":"","structs":{},"methods":[{"name":"createApplication","args":[{"name":"hp","type":"uint64"},{"name":"name","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"initStorage","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"slash","desc":"Slash action to damage the boss.","args":[{"name":"damagePayment","type":"pay","desc":"The specified damage payment."},{"name":"times","type":"uint64"}],"returns":{"type":"uint64","desc":"The final boss heal."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"heal","desc":"Heal action to restore HP to the boss.","args":[{"name":"healPayment","type":"pay","desc":"The user performing the action."}],"returns":{"type":"uint64","desc":"The final boss heal."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"nuke","desc":"Nuke action to inflict damage to the boss.","args":[{"name":"nukePayment","type":"pay","desc":"The user performing the action."}],"returns":{"type":"uint64","desc":"The final boss heal."},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":4,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"bossHP":{"key":"aA==","keyType":"AVMString","valueType":"AVMUint64"},"bossTotalHP":{"key":"dGg=","keyType":"AVMString","valueType":"AVMUint64"},"totalAlgoStaked":{"key":"cA==","keyType":"AVMString","valueType":"AVMUint64"},"governor":{"key":"Zw==","keyType":"AVMString","valueType":"AVMBytes"},"bossName":{"key":"bg==","keyType":"AVMString","valueType":"AVMBytes"},"bossState":{"key":"cw==","keyType":"AVMString","valueType":"AVMBytes"},"contractVersion":{"key":"dg==","keyType":"AVMString","valueType":"AVMBytes"},"numStakers":{"key":"bnVtU3Rha2Vycw==","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AresBattle contract
 */
export type AresBattleArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,string)void': {
      hp: bigint | number
      name: string
    }
    'initStorage()void': Record<string, never>
    'slash(pay,uint64)uint64': {
      /**
       * The specified damage payment.
       */
      damagePayment: AppMethodCallTransactionArgument
      times: bigint | number
    }
    'heal(pay)uint64': {
      /**
       * The user performing the action.
       */
      healPayment: AppMethodCallTransactionArgument
    }
    'nuke(pay)uint64': {
      /**
       * The user performing the action.
       */
      nukePayment: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,string)void': [hp: bigint | number, name: string]
    'initStorage()void': []
    'slash(pay,uint64)uint64': [damagePayment: AppMethodCallTransactionArgument, times: bigint | number]
    'heal(pay)uint64': [healPayment: AppMethodCallTransactionArgument]
    'nuke(pay)uint64': [nukePayment: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type AresBattleReturns = {
  'createApplication(uint64,string)void': void
  'initStorage()void': void
  'slash(pay,uint64)uint64': bigint
  'heal(pay)uint64': bigint
  'nuke(pay)uint64': bigint
}

/**
 * Defines the types of available calls and state of the AresBattle smart contract.
 */
export type AresBattleTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,string)void' | 'createApplication', {
      argsObj: AresBattleArgs['obj']['createApplication(uint64,string)void']
      argsTuple: AresBattleArgs['tuple']['createApplication(uint64,string)void']
      returns: AresBattleReturns['createApplication(uint64,string)void']
    }>
    & Record<'initStorage()void' | 'initStorage', {
      argsObj: AresBattleArgs['obj']['initStorage()void']
      argsTuple: AresBattleArgs['tuple']['initStorage()void']
      returns: AresBattleReturns['initStorage()void']
    }>
    & Record<'slash(pay,uint64)uint64' | 'slash', {
      argsObj: AresBattleArgs['obj']['slash(pay,uint64)uint64']
      argsTuple: AresBattleArgs['tuple']['slash(pay,uint64)uint64']
      /**
       * The final boss heal.
       */
      returns: AresBattleReturns['slash(pay,uint64)uint64']
    }>
    & Record<'heal(pay)uint64' | 'heal', {
      argsObj: AresBattleArgs['obj']['heal(pay)uint64']
      argsTuple: AresBattleArgs['tuple']['heal(pay)uint64']
      /**
       * The final boss heal.
       */
      returns: AresBattleReturns['heal(pay)uint64']
    }>
    & Record<'nuke(pay)uint64' | 'nuke', {
      argsObj: AresBattleArgs['obj']['nuke(pay)uint64']
      argsTuple: AresBattleArgs['tuple']['nuke(pay)uint64']
      /**
       * The final boss heal.
       */
      returns: AresBattleReturns['nuke(pay)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        bossHp: bigint
        bossTotalHp: bigint
        totalAlgoStaked: bigint
        governor: BinaryState
        bossName: BinaryState
        bossState: BinaryState
        contractVersion: BinaryState
        numStakers: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AresBattleSignatures = keyof AresBattleTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AresBattleNonVoidMethodSignatures = keyof AresBattleTypes['methods'] extends infer T ? T extends keyof AresBattleTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AresBattle smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AresBattleSignatures> = AresBattleTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AresBattle smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AresBattleSignatures> = AresBattleTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AresBattleTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AresBattleCreateCallParams =
  | Expand<CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & {method: 'createApplication(uint64,string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AresBattleDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AresBattleCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AresBattle smart contract
 */
export abstract class AresBattleParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AresBattleCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,string)void':
            return AresBattleParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AresBattle smart contract using the createApplication(uint64,string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.hp, params.args.name],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initStorage()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initStorage(params: CallParams<AresBattleArgs['obj']['initStorage()void'] | AresBattleArgs['tuple']['initStorage()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initStorage()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the slash(pay,uint64)uint64 ABI method
   *
   * Slash action to damage the boss.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static slash(params: CallParams<AresBattleArgs['obj']['slash(pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(pay,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'slash(pay,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.damagePayment, params.args.times],
    }
  }
  /**
   * Constructs a no op call for the heal(pay)uint64 ABI method
   *
   * Heal action to restore HP to the boss.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static heal(params: CallParams<AresBattleArgs['obj']['heal(pay)uint64'] | AresBattleArgs['tuple']['heal(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'heal(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.healPayment],
    }
  }
  /**
   * Constructs a no op call for the nuke(pay)uint64 ABI method
   *
   * Nuke action to inflict damage to the boss.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static nuke(params: CallParams<AresBattleArgs['obj']['nuke(pay)uint64'] | AresBattleArgs['tuple']['nuke(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'nuke(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nukePayment],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AresBattle smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AresBattleFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AresBattleFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AresBattleClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AresBattleClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AresBattle smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AresBattleDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AresBattleParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
    })
    return { result: result.result, appClient: new AresBattleClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AresBattle smart contract using the createApplication(uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AresBattleParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AresBattle smart contract using the createApplication(uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AresBattleParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AresBattle smart contract using an ABI method call using the createApplication(uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AresBattleParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as undefined | AresBattleReturns['createApplication(uint64,string)void'] }, appClient: new AresBattleClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AresBattle smart contract
 */
export class AresBattleClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AresBattleClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AresBattle app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AresBattleClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AresBattleNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AresBattleClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AresBattleClient> {
    return new AresBattleClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AresBattleClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AresBattleClient> {
    return new AresBattleClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AresBattle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AresBattle smart contract using the `initStorage()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initStorage: (params: CallParams<AresBattleArgs['obj']['initStorage()void'] | AresBattleArgs['tuple']['initStorage()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AresBattleParamsFactory.initStorage(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `slash(pay,uint64)uint64` ABI method.
     *
     * Slash action to damage the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The final boss heal.
     */
    slash: (params: CallParams<AresBattleArgs['obj']['slash(pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(pay,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AresBattleParamsFactory.slash(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `heal(pay)uint64` ABI method.
     *
     * Heal action to restore HP to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The final boss heal.
     */
    heal: (params: CallParams<AresBattleArgs['obj']['heal(pay)uint64'] | AresBattleArgs['tuple']['heal(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AresBattleParamsFactory.heal(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `nuke(pay)uint64` ABI method.
     *
     * Nuke action to inflict damage to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The final boss heal.
     */
    nuke: (params: CallParams<AresBattleArgs['obj']['nuke(pay)uint64'] | AresBattleArgs['tuple']['nuke(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AresBattleParamsFactory.nuke(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AresBattle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AresBattle smart contract using the `initStorage()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initStorage: (params: CallParams<AresBattleArgs['obj']['initStorage()void'] | AresBattleArgs['tuple']['initStorage()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AresBattleParamsFactory.initStorage(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `slash(pay,uint64)uint64` ABI method.
     *
     * Slash action to damage the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The final boss heal.
     */
    slash: (params: CallParams<AresBattleArgs['obj']['slash(pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(pay,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AresBattleParamsFactory.slash(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `heal(pay)uint64` ABI method.
     *
     * Heal action to restore HP to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The final boss heal.
     */
    heal: (params: CallParams<AresBattleArgs['obj']['heal(pay)uint64'] | AresBattleArgs['tuple']['heal(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AresBattleParamsFactory.heal(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `nuke(pay)uint64` ABI method.
     *
     * Nuke action to inflict damage to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The final boss heal.
     */
    nuke: (params: CallParams<AresBattleArgs['obj']['nuke(pay)uint64'] | AresBattleArgs['tuple']['nuke(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AresBattleParamsFactory.nuke(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AresBattle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AresBattle smart contract using the `initStorage()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initStorage: async (params: CallParams<AresBattleArgs['obj']['initStorage()void'] | AresBattleArgs['tuple']['initStorage()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AresBattleParamsFactory.initStorage(params))
      return {...result, return: result.return as undefined | AresBattleReturns['initStorage()void']}
    },

    /**
     * Makes a call to the AresBattle smart contract using the `slash(pay,uint64)uint64` ABI method.
     *
     * Slash action to damage the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The final boss heal.
     */
    slash: async (params: CallParams<AresBattleArgs['obj']['slash(pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(pay,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AresBattleParamsFactory.slash(params))
      return {...result, return: result.return as undefined | AresBattleReturns['slash(pay,uint64)uint64']}
    },

    /**
     * Makes a call to the AresBattle smart contract using the `heal(pay)uint64` ABI method.
     *
     * Heal action to restore HP to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The final boss heal.
     */
    heal: async (params: CallParams<AresBattleArgs['obj']['heal(pay)uint64'] | AresBattleArgs['tuple']['heal(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AresBattleParamsFactory.heal(params))
      return {...result, return: result.return as undefined | AresBattleReturns['heal(pay)uint64']}
    },

    /**
     * Makes a call to the AresBattle smart contract using the `nuke(pay)uint64` ABI method.
     *
     * Nuke action to inflict damage to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The final boss heal.
     */
    nuke: async (params: CallParams<AresBattleArgs['obj']['nuke(pay)uint64'] | AresBattleArgs['tuple']['nuke(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AresBattleParamsFactory.nuke(params))
      return {...result, return: result.return as undefined | AresBattleReturns['nuke(pay)uint64']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AresBattleClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AresBattle app
   */
  state = {
    /**
     * Methods to access global state for the current AresBattle app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          bossHp: result.bossHP,
          bossTotalHp: result.bossTotalHP,
          totalAlgoStaked: result.totalAlgoStaked,
          governor: new BinaryStateValue(result.governor),
          bossName: new BinaryStateValue(result.bossName),
          bossState: new BinaryStateValue(result.bossState),
          contractVersion: new BinaryStateValue(result.contractVersion),
          numStakers: result.numStakers,
        }
      },
      /**
       * Get the current value of the bossHP key in global state
       */
      bossHp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("bossHp")) as bigint | undefined },
      /**
       * Get the current value of the bossTotalHP key in global state
       */
      bossTotalHp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("bossTotalHp")) as bigint | undefined },
      /**
       * Get the current value of the totalAlgoStaked key in global state
       */
      totalAlgoStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAlgoStaked")) as bigint | undefined },
      /**
       * Get the current value of the governor key in global state
       */
      governor: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("governor")) as Uint8Array | undefined) },
      /**
       * Get the current value of the bossName key in global state
       */
      bossName: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bossName")) as Uint8Array | undefined) },
      /**
       * Get the current value of the bossState key in global state
       */
      bossState: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bossState")) as Uint8Array | undefined) },
      /**
       * Get the current value of the contractVersion key in global state
       */
      contractVersion: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("contractVersion")) as Uint8Array | undefined) },
      /**
       * Get the current value of the numStakers key in global state
       */
      numStakers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("numStakers")) as bigint | undefined },
    },
  }

  public newGroup(): AresBattleComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initStorage()void method call against the AresBattle contract
       */
      initStorage(params: CallParams<AresBattleArgs['obj']['initStorage()void'] | AresBattleArgs['tuple']['initStorage()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initStorage(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a slash(pay,uint64)uint64 method call against the AresBattle contract
       */
      slash(params: CallParams<AresBattleArgs['obj']['slash(pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(pay,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.slash(params)))
        resultMappers.push((v) => client.decodeReturnValue('slash(pay,uint64)uint64', v))
        return this
      },
      /**
       * Add a heal(pay)uint64 method call against the AresBattle contract
       */
      heal(params: CallParams<AresBattleArgs['obj']['heal(pay)uint64'] | AresBattleArgs['tuple']['heal(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.heal(params)))
        resultMappers.push((v) => client.decodeReturnValue('heal(pay)uint64', v))
        return this
      },
      /**
       * Add a nuke(pay)uint64 method call against the AresBattle contract
       */
      nuke(params: CallParams<AresBattleArgs['obj']['nuke(pay)uint64'] | AresBattleArgs['tuple']['nuke(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.nuke(params)))
        resultMappers.push((v) => client.decodeReturnValue('nuke(pay)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the AresBattle contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AresBattleComposer
  }
}
export type AresBattleComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initStorage()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initStorage(params?: CallParams<AresBattleArgs['obj']['initStorage()void'] | AresBattleArgs['tuple']['initStorage()void']>): AresBattleComposer<[...TReturns, AresBattleReturns['initStorage()void'] | undefined]>

  /**
   * Calls the slash(pay,uint64)uint64 ABI method.
   *
   * Slash action to damage the boss.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  slash(params?: CallParams<AresBattleArgs['obj']['slash(pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(pay,uint64)uint64']>): AresBattleComposer<[...TReturns, AresBattleReturns['slash(pay,uint64)uint64'] | undefined]>

  /**
   * Calls the heal(pay)uint64 ABI method.
   *
   * Heal action to restore HP to the boss.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  heal(params?: CallParams<AresBattleArgs['obj']['heal(pay)uint64'] | AresBattleArgs['tuple']['heal(pay)uint64']>): AresBattleComposer<[...TReturns, AresBattleReturns['heal(pay)uint64'] | undefined]>

  /**
   * Calls the nuke(pay)uint64 ABI method.
   *
   * Nuke action to inflict damage to the boss.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nuke(params?: CallParams<AresBattleArgs['obj']['nuke(pay)uint64'] | AresBattleArgs['tuple']['nuke(pay)uint64']>): AresBattleComposer<[...TReturns, AresBattleReturns['nuke(pay)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AresBattle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AresBattleComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AresBattleComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AresBattleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AresBattleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AresBattleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AresBattleComposerResults<TReturns>>
}
export type AresBattleComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

