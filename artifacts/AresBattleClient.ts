/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"AresBattle","desc":"","structs":{},"methods":[{"name":"createApplication","args":[{"name":"hp","type":"uint64"},{"name":"name","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"slash","desc":"Slash action to damage the boss.","args":[{"name":"user","type":"address","desc":"The user performing the action."},{"name":"damagePayment","type":"pay","desc":"The specified damage payment."},{"name":"times","type":"uint64"}],"returns":{"type":"uint64","desc":"The actual damage dealt."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"heal","desc":"Heal action to restore HP to the boss.","args":[{"name":"user","type":"address","desc":"The user performing the action."}],"returns":{"type":"uint64","desc":"The amount healed."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"nuke","desc":"Nuke action to inflict damage to the boss.","args":[{"name":"user","type":"address","desc":"The user performing the action."}],"returns":{"type":"uint64","desc":"The actual damage dealt."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"distributeRewards","desc":"Distribute rewards when the boss is defeated.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}}],"state":{"schema":{"global":{"ints":3,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"bossHP":{"key":"aHA=","keyType":"AVMString","valueType":"AVMUint64"},"bossTotalHP":{"key":"dGhw","keyType":"AVMString","valueType":"AVMUint64"},"totalPool":{"key":"dG90YWxQb29s","keyType":"AVMString","valueType":"AVMUint64"},"governor":{"key":"Zw==","keyType":"AVMString","valueType":"AVMBytes"},"bossName":{"key":"bg==","keyType":"AVMString","valueType":"AVMBytes"},"bossState":{"key":"cw==","keyType":"AVMString","valueType":"AVMBytes"},"contractVersion":{"key":"dg==","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAgMzIKYnl0ZWNibG9jayAweDY4NzAgMHggMHg3NDZmNzQ2MTZjNTA2ZjZmNmMgMHgxNTFmN2M3NSAweDYzCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4wCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY2FsbF9EZWxldGVBcHBsaWNhdGlvbiAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCxzdHJpbmcpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gbmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGhwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCxzdHJpbmcpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24oaHA6IHVpbnQ2NCwgbmFtZTogc3RyaW5nKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6MjUKCS8vIHRoaXMuZ292ZXJub3IudmFsdWUgPSB0aGlzLnR4bi5zZW5kZXIKCXB1c2hieXRlcyAweDY3IC8vICJnIgoJdHhuIFNlbmRlcgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQXJlc0JhdHRsZS5hbGdvLnRzOjI2CgkvLyB0aGlzLmJvc3NIUC52YWx1ZSA9IGhwCglieXRlYyAwIC8vICAiaHAiCglmcmFtZV9kaWcgLTEgLy8gaHA6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQXJlc0JhdHRsZS5hbGdvLnRzOjI3CgkvLyB0aGlzLmJvc3NUb3RhbEhQLnZhbHVlID0gaHAKCXB1c2hieXRlcyAweDc0Njg3MCAvLyAidGhwIgoJZnJhbWVfZGlnIC0xIC8vIGhwOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czoyOAoJLy8gdGhpcy5ib3NzTmFtZS52YWx1ZSA9IG5hbWUKCXB1c2hieXRlcyAweDZlIC8vICJuIgoJZnJhbWVfZGlnIC0yIC8vIG5hbWU6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czoyOQoJLy8gdGhpcy5ib3NzU3RhdGUudmFsdWUgPSAnQUNUSVZFJwoJcHVzaGJ5dGVzIDB4NzMgLy8gInMiCglwdXNoYnl0ZXMgMHgwMDA2NDE0MzU0NDk1NjQ1CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6MzAKCS8vIHRoaXMuY29udHJhY3RWZXJzaW9uLnZhbHVlID0gJ3YxLjAuMycKCXB1c2hieXRlcyAweDc2IC8vICJ2IgoJcHVzaGJ5dGVzIDB4MDAwNjc2MzEyZTMwMmUzMwoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc2xhc2goYWRkcmVzcyxwYXksdWludDY0KXVpbnQ2NAoqYWJpX3JvdXRlX3NsYXNoOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAzIC8vIDB4MTUxZjdjNzUKCgkvLyB0aW1lczogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gZGFtYWdlUGF5bWVudDogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDEgKGRhbWFnZVBheW1lbnQpIGZvciBzbGFzaCBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyB1c2VyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAyIC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDIgKHVzZXIpIGZvciBzbGFzaCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzbGFzaChhZGRyZXNzLHBheSx1aW50NjQpdWludDY0CgljYWxsc3ViIHNsYXNoCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gc2xhc2godXNlcjogQWRkcmVzcywgZGFtYWdlUGF5bWVudDogUGF5VHhuLCB0aW1lczogdWludDY0KTogdWludDY0Ci8vCi8vIFNsYXNoIGFjdGlvbiB0byBkYW1hZ2UgdGhlIGJvc3MuCi8vCi8vIEBwYXJhbSB1c2VyIFRoZSB1c2VyIHBlcmZvcm1pbmcgdGhlIGFjdGlvbi4KLy8gQHBhcmFtIGRhbWFnZVBheW1lbnQgVGhlIHNwZWNpZmllZCBkYW1hZ2UgcGF5bWVudC4KLy8gQHJldHVybnMgVGhlIGFjdHVhbCBkYW1hZ2UgZGVhbHQuCnNsYXNoOgoJcHJvdG8gMyAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDEgLy8gMHgKCWR1cAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6NDIKCS8vIHZlcmlmeVBheVR4bihkYW1hZ2VQYXltZW50LCB7IGFtb3VudDogMV8wMDAgfSkKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBkYW1hZ2VQYXltZW50OiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJcHVzaGludCAxXzAwMAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6ImRhbWFnZVBheW1lbnQiLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoiMV8wMDAifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czo0MwoJLy8gZGFtYWdlID0gdGltZXMKCWZyYW1lX2RpZyAtMyAvLyB0aW1lczogdWludDY0CglmcmFtZV9idXJ5IDAgLy8gZGFtYWdlOiB1aW50NjQKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czo0NAoJLy8gZGFtYWdlIDwgMSB8fCBkYW1hZ2UgPiAxMDAKCWZyYW1lX2RpZyAwIC8vIGRhbWFnZTogdWludDY0CglpbnRjIDAgLy8gMQoJPAoJZHVwCglibnogKnNraXBfb3IwCglmcmFtZV9kaWcgMCAvLyBkYW1hZ2U6IHVpbnQ2NAoJcHVzaGludCAxMDAKCT4KCXx8Cgoqc2tpcF9vcjA6CglieiAqaWYwX2VuZAoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gRGFtYWdlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMDAKCWVycgoKKmlmMF9lbmQ6CgkvLyAqaWYxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czo0NQoJLy8gdGhpcy5ib3NzSFAudmFsdWUgPCAwCglieXRlYyAwIC8vICAiaHAiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAxIC8vIDAKCTwKCWJ6ICppZjFfZW5kCgoJLy8gKmlmMV9jb25zZXF1ZW50CgkvLyBCb3NzIGlzIERFRkVBVEVEIQoJZXJyCgoqaWYxX2VuZDoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6NDcKCS8vIGFjdHVhbERhbWFnZSA9IGRhbWFnZQoJZnJhbWVfZGlnIDAgLy8gZGFtYWdlOiB1aW50NjQKCWZyYW1lX2J1cnkgMSAvLyBhY3R1YWxEYW1hZ2U6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6NDgKCS8vIHRoaXMuYm9zc0hQLnZhbHVlIC09IGFjdHVhbERhbWFnZQoJYnl0ZWMgMCAvLyAgImhwIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAxIC8vIGFjdHVhbERhbWFnZTogdWludDY0CgktCglieXRlYyAwIC8vICAiaHAiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6NDkKCS8vIHRoaXMudG90YWxQb29sLnZhbHVlICs9IGRhbWFnZVBheW1lbnQuYW1vdW50CglieXRlYyAyIC8vICAidG90YWxQb29sIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMiAvLyBkYW1hZ2VQYXltZW50OiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJKwoJYnl0ZWMgMiAvLyAgInRvdGFsUG9vbCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czo1MQoJLy8gcmV0dXJuIGFjdHVhbERhbWFnZTsKCWZyYW1lX2RpZyAxIC8vIGFjdHVhbERhbWFnZTogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMQoJcmV0c3ViCgovLyBoZWFsKGFkZHJlc3MpdWludDY0CiphYmlfcm91dGVfaGVhbDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMyAvLyAweDE1MWY3Yzc1CgoJLy8gdXNlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMiAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwICh1c2VyKSBmb3IgaGVhbCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBoZWFsKGFkZHJlc3MpdWludDY0CgljYWxsc3ViIGhlYWwKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBoZWFsKHVzZXI6IEFkZHJlc3MpOiB1aW50NjQKLy8KLy8gSGVhbCBhY3Rpb24gdG8gcmVzdG9yZSBIUCB0byB0aGUgYm9zcy4KLy8KLy8gQHBhcmFtIHVzZXIgVGhlIHVzZXIgcGVyZm9ybWluZyB0aGUgYWN0aW9uLgovLyBAcmV0dXJucyBUaGUgYW1vdW50IGhlYWxlZC4KaGVhbDoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAxIC8vIDB4CgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czo2NQoJLy8gaGVhbEFtb3VudCA9IDEwMSArIDUwCglwdXNoaW50IDE1MQoJZnJhbWVfYnVyeSAwIC8vIGhlYWxBbW91bnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6NjYKCS8vIHRoaXMuYm9zc0hQLnZhbHVlICs9IGhlYWxBbW91bnQKCWJ5dGVjIDAgLy8gICJocCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyBoZWFsQW1vdW50OiB1aW50NjQKCSsKCWJ5dGVjIDAgLy8gICJocCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czo2NwoJLy8gdGhpcy50b3RhbFBvb2wudmFsdWUgLT0gOAoJYnl0ZWMgMiAvLyAgInRvdGFsUG9vbCIKCWFwcF9nbG9iYWxfZ2V0CglwdXNoaW50IDgKCS0KCWJ5dGVjIDIgLy8gICJ0b3RhbFBvb2wiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6NjgKCS8vIHRoaXMudHJhY2tDb250cmlidXRpb24odXNlciwgaGVhbEFtb3VudCkKCWZyYW1lX2RpZyAwIC8vIGhlYWxBbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWNhbGxzdWIgdHJhY2tDb250cmlidXRpb24KCgkvLyBjb250cmFjdHMvQXJlc0JhdHRsZS5hbGdvLnRzOjY5CgkvLyByZXR1cm4gaGVhbEFtb3VudDsKCWZyYW1lX2RpZyAwIC8vIGhlYWxBbW91bnQ6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBudWtlKGFkZHJlc3MpdWludDY0CiphYmlfcm91dGVfbnVrZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMyAvLyAweDE1MWY3Yzc1CgoJLy8gdXNlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMiAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwICh1c2VyKSBmb3IgbnVrZSBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBudWtlKGFkZHJlc3MpdWludDY0CgljYWxsc3ViIG51a2UKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBudWtlKHVzZXI6IEFkZHJlc3MpOiB1aW50NjQKLy8KLy8gTnVrZSBhY3Rpb24gdG8gaW5mbGljdCBkYW1hZ2UgdG8gdGhlIGJvc3MuCi8vCi8vIEBwYXJhbSB1c2VyIFRoZSB1c2VyIHBlcmZvcm1pbmcgdGhlIGFjdGlvbi4KLy8gQHJldHVybnMgVGhlIGFjdHVhbCBkYW1hZ2UgZGVhbHQuCm51a2U6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMSAvLyAweAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6ODMKCS8vIGFjdHVhbERhbWFnZSA9IDEwMSArIDEwMAoJcHVzaGludCAyMDEKCWZyYW1lX2J1cnkgMCAvLyBhY3R1YWxEYW1hZ2U6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6ODQKCS8vIHRoaXMuYm9zc0hQLnZhbHVlIC09IGFjdHVhbERhbWFnZQoJYnl0ZWMgMCAvLyAgImhwIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIGFjdHVhbERhbWFnZTogdWludDY0CgktCglieXRlYyAwIC8vICAiaHAiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6ODUKCS8vIHRoaXMudG90YWxQb29sLnZhbHVlICs9IDEzMwoJYnl0ZWMgMiAvLyAgInRvdGFsUG9vbCIKCWFwcF9nbG9iYWxfZ2V0CglwdXNoaW50IDEzMwoJKwoJYnl0ZWMgMiAvLyAgInRvdGFsUG9vbCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czo4NgoJLy8gdGhpcy50cmFja0NvbnRyaWJ1dGlvbih1c2VyLCBhY3R1YWxEYW1hZ2UpCglmcmFtZV9kaWcgMCAvLyBhY3R1YWxEYW1hZ2U6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWNhbGxzdWIgdHJhY2tDb250cmlidXRpb24KCgkvLyBjb250cmFjdHMvQXJlc0JhdHRsZS5hbGdvLnRzOjg3CgkvLyByZXR1cm4gYWN0dWFsRGFtYWdlOwoJZnJhbWVfZGlnIDAgLy8gYWN0dWFsRGFtYWdlOiB1aW50NjQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gdHJhY2tDb250cmlidXRpb24odXNlcjogQWRkcmVzcywgY29udHJpYnV0aW9uOiB1aW50NjQpOiB2b2lkCi8vCi8vIFRyYWNrIHVzZXIgY29udHJpYnV0aW9ucyBmb3IgcmV3YXJkcyBkaXN0cmlidXRpb24uCi8vCi8vIEBwYXJhbSB1c2VyIFRoZSB1c2VyIHBlcmZvcm1pbmcgdGhlIGFjdGlvbi4KLy8gQHBhcmFtIGNvbnRyaWJ1dGlvbiBUaGUgY29udHJpYnV0aW9uIGFtb3VudCAocG9zaXRpdmUgZm9yIGRhbWFnZSwgbmVnYXRpdmUgZm9yIGhlYWwpLgp0cmFja0NvbnRyaWJ1dGlvbjoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAxIC8vIDB4CgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czo5NwoJLy8gY3VycmVudENvbnRyaWJ1dGlvbiA9IHRoaXMuY29udHJpYnV0aW9ucyh1c2VyKS52YWx1ZSB8fCAwCglieXRlYyA0IC8vICAiYyIKCWZyYW1lX2RpZyAtMSAvLyB1c2VyOiBBZGRyZXNzCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuY29udHJpYnV0aW9ucyh1c2VyKS52YWx1ZQoJYXNzZXJ0CglidG9pCglkdXAKCWJueiAqc2tpcF9vcjEKCWludGMgMSAvLyAwCgl8fAoKKnNraXBfb3IxOgoJZnJhbWVfYnVyeSAwIC8vIGN1cnJlbnRDb250cmlidXRpb246IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6OTgKCS8vIHRoaXMuY29udHJpYnV0aW9ucyh1c2VyKS52YWx1ZSA9IGN1cnJlbnRDb250cmlidXRpb24gKyBjb250cmlidXRpb24KCWJ5dGVjIDQgLy8gICJjIgoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gY3VycmVudENvbnRyaWJ1dGlvbjogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gY29udHJpYnV0aW9uOiB1aW50NjQKCSsKCWl0b2IKCWJveF9wdXQKCXJldHN1YgoKLy8gZGlzdHJpYnV0ZVJld2FyZHMoKXZvaWQKKmFiaV9yb3V0ZV9kaXN0cmlidXRlUmV3YXJkczoKCS8vIGV4ZWN1dGUgZGlzdHJpYnV0ZVJld2FyZHMoKXZvaWQKCWNhbGxzdWIgZGlzdHJpYnV0ZVJld2FyZHMKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGRpc3RyaWJ1dGVSZXdhcmRzKCk6IHZvaWQKLy8KLy8gRGlzdHJpYnV0ZSByZXdhcmRzIHdoZW4gdGhlIGJvc3MgaXMgZGVmZWF0ZWQuCmRpc3RyaWJ1dGVSZXdhcmRzOgoJcHJvdG8gMCAwCgoJLy8gKmlmMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6MTA1CgkvLyB0aGlzLmJvc3NIUC52YWx1ZSA8PSAwCglieXRlYyAwIC8vICAiaHAiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAxIC8vIDAKCTw9CglieiAqaWYyX2VuZAoKCS8vICppZjJfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czoxMTAKCS8vIHRoaXMucmVzZXRCYXR0bGUoKQoJY2FsbHN1YiByZXNldEJhdHRsZQoKKmlmMl9lbmQ6CglyZXRzdWIKCi8vIHJlc2V0QmF0dGxlKCk6IHZvaWQKLy8KLy8gUmVzZXQgdGhlIGJhdHRsZSBmb3IgYSBuZXcgcm91bmQuCnJlc2V0QmF0dGxlOgoJcHJvdG8gMCAwCglyZXRzdWIKCi8vIGRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkCiphYmlfcm91dGVfZGVsZXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIGRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIGRlbGV0ZUFwcGxpY2F0aW9uCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBkZWxldGVBcHBsaWNhdGlvbigpOiB2b2lkCmRlbGV0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0FyZXNCYXR0bGUuYWxnby50czoxMjQKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgIHJlY2VpdmVyOiBnbG9iYWxzLmNyZWF0b3JBZGRyZXNzLAoJLy8gICAgICAgY2xvc2VSZW1haW5kZXJUbzogZ2xvYmFscy5jcmVhdG9yQWRkcmVzcywKCS8vICAgICAgIGFtb3VudDogMCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAwIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQXJlc0JhdHRsZS5hbGdvLnRzOjEyNQoJLy8gcmVjZWl2ZXI6IGdsb2JhbHMuY3JlYXRvckFkZHJlc3MKCWdsb2JhbCBDcmVhdG9yQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6MTI2CgkvLyBjbG9zZVJlbWFpbmRlclRvOiBnbG9iYWxzLmNyZWF0b3JBZGRyZXNzCglnbG9iYWwgQ3JlYXRvckFkZHJlc3MKCWl0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6MTI3CgkvLyBhbW91bnQ6IDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gcmFuZG9tKG1pbjogdWludDY0LCBtYXg6IHVpbnQ2NCwgc2VlZDogQWRkcmVzcyk6IHVpbnQ2NAovLwovLyBQc2V1ZG8tcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuCi8vCi8vIEBwYXJhbSBtaW4gVGhlIG1pbmltdW0gdmFsdWUgKGluY2x1c2l2ZSkuCi8vIEBwYXJhbSBtYXggVGhlIG1heGltdW0gdmFsdWUgKGV4Y2x1c2l2ZSkuCi8vIEByZXR1cm5zIEEgcHNldWRvLXJhbmRvbSBudW1iZXIgYmV0d2VlbiBtaW4gYW5kIG1heC4KcmFuZG9tOgoJcHJvdG8gMyAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDEgLy8gMHgKCWR1cAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6MTM5CgkvLyBzZWVkTnVtID0gYnRvaShzZWVkKQoJZnJhbWVfZGlnIC0zIC8vIHNlZWQ6IEFkZHJlc3MKCWJ0b2kKCWZyYW1lX2J1cnkgMCAvLyBzZWVkTnVtOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQXJlc0JhdHRsZS5hbGdvLnRzOjE0MAoJLy8gcmFuZG9tVmFsdWUgPSAoc2VlZE51bSAlIChtYXggLSBtaW4pKSArIG1pbgoJZnJhbWVfZGlnIDAgLy8gc2VlZE51bTogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gbWF4OiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBtaW46IHVpbnQ2NAoJLQoJJQoJZnJhbWVfZGlnIC0xIC8vIG1pbjogdWludDY0CgkrCglmcmFtZV9idXJ5IDEgLy8gcmFuZG9tVmFsdWU6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9BcmVzQmF0dGxlLmFsZ28udHM6MTQxCgkvLyByZXR1cm4gcmFuZG9tVmFsdWU7CglmcmFtZV9kaWcgMSAvLyByYW5kb21WYWx1ZTogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMQoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhiOGM1NmY1MiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCxzdHJpbmcpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweGI5NzdkMTM5IC8vIG1ldGhvZCAic2xhc2goYWRkcmVzcyxwYXksdWludDY0KXVpbnQ2NCIKCXB1c2hieXRlcyAweDU2OGMyNzQwIC8vIG1ldGhvZCAiaGVhbChhZGRyZXNzKXVpbnQ2NCIKCXB1c2hieXRlcyAweDVmODlkNTYyIC8vIG1ldGhvZCAibnVrZShhZGRyZXNzKXVpbnQ2NCIKCXB1c2hieXRlcyAweGIwYTkzODA3IC8vIG1ldGhvZCAiZGlzdHJpYnV0ZVJld2FyZHMoKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3NsYXNoICphYmlfcm91dGVfaGVhbCAqYWJpX3JvdXRlX251a2UgKmFiaV9yb3V0ZV9kaXN0cmlidXRlUmV3YXJkcwoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycgoKKmNhbGxfRGVsZXRlQXBwbGljYXRpb246CglwdXNoYnl0ZXMgMHgyNDg3YzMyYyAvLyBtZXRob2QgImRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9kZWxldGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIERlbGV0ZUFwcGxpY2F0aW9uCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AresBattle contract
 */
export type AresBattleArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,string)void': {
      hp: bigint | number
      name: string
    }
    'slash(address,pay,uint64)uint64': {
      /**
       * The user performing the action.
       */
      user: string
      /**
       * The specified damage payment.
       */
      damagePayment: AppMethodCallTransactionArgument
      times: bigint | number
    }
    'heal(address)uint64': {
      /**
       * The user performing the action.
       */
      user: string
    }
    'nuke(address)uint64': {
      /**
       * The user performing the action.
       */
      user: string
    }
    'distributeRewards()void': Record<string, never>
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,string)void': [hp: bigint | number, name: string]
    'slash(address,pay,uint64)uint64': [user: string, damagePayment: AppMethodCallTransactionArgument, times: bigint | number]
    'heal(address)uint64': [user: string]
    'nuke(address)uint64': [user: string]
    'distributeRewards()void': []
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type AresBattleReturns = {
  'createApplication(uint64,string)void': void
  'slash(address,pay,uint64)uint64': bigint
  'heal(address)uint64': bigint
  'nuke(address)uint64': bigint
  'distributeRewards()void': void
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the AresBattle smart contract.
 */
export type AresBattleTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,string)void' | 'createApplication', {
      argsObj: AresBattleArgs['obj']['createApplication(uint64,string)void']
      argsTuple: AresBattleArgs['tuple']['createApplication(uint64,string)void']
      returns: AresBattleReturns['createApplication(uint64,string)void']
    }>
    & Record<'slash(address,pay,uint64)uint64' | 'slash', {
      argsObj: AresBattleArgs['obj']['slash(address,pay,uint64)uint64']
      argsTuple: AresBattleArgs['tuple']['slash(address,pay,uint64)uint64']
      /**
       * The actual damage dealt.
       */
      returns: AresBattleReturns['slash(address,pay,uint64)uint64']
    }>
    & Record<'heal(address)uint64' | 'heal', {
      argsObj: AresBattleArgs['obj']['heal(address)uint64']
      argsTuple: AresBattleArgs['tuple']['heal(address)uint64']
      /**
       * The amount healed.
       */
      returns: AresBattleReturns['heal(address)uint64']
    }>
    & Record<'nuke(address)uint64' | 'nuke', {
      argsObj: AresBattleArgs['obj']['nuke(address)uint64']
      argsTuple: AresBattleArgs['tuple']['nuke(address)uint64']
      /**
       * The actual damage dealt.
       */
      returns: AresBattleReturns['nuke(address)uint64']
    }>
    & Record<'distributeRewards()void' | 'distributeRewards', {
      argsObj: AresBattleArgs['obj']['distributeRewards()void']
      argsTuple: AresBattleArgs['tuple']['distributeRewards()void']
      returns: AresBattleReturns['distributeRewards()void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: AresBattleArgs['obj']['deleteApplication()void']
      argsTuple: AresBattleArgs['tuple']['deleteApplication()void']
      returns: AresBattleReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        bossHp: bigint
        bossTotalHp: bigint
        totalPool: bigint
        governor: BinaryState
        bossName: BinaryState
        bossState: BinaryState
        contractVersion: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AresBattleSignatures = keyof AresBattleTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AresBattleNonVoidMethodSignatures = keyof AresBattleTypes['methods'] extends infer T ? T extends keyof AresBattleTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AresBattle smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AresBattleSignatures> = AresBattleTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AresBattle smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AresBattleSignatures> = AresBattleTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AresBattleTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AresBattleCreateCallParams =
  | Expand<CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & {method: 'createApplication(uint64,string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type AresBattleDeleteCallParams =
  | Expand<CallParams<AresBattleArgs['obj']['deleteApplication()void'] | AresBattleArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<AresBattleArgs['obj']['deleteApplication()void'] | AresBattleArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type AresBattleDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AresBattleCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: AresBattleDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AresBattle smart contract
 */
export abstract class AresBattleParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AresBattleCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,string)void':
            return AresBattleParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AresBattle smart contract using the createApplication(uint64,string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.hp, params.args.name],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends AresBattleDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return AresBattleParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the AresBattle smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<AresBattleArgs['obj']['deleteApplication()void'] | AresBattleArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the slash(address,pay,uint64)uint64 ABI method
   *
   * Slash action to damage the boss.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static slash(params: CallParams<AresBattleArgs['obj']['slash(address,pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(address,pay,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'slash(address,pay,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.damagePayment, params.args.times],
    }
  }
  /**
   * Constructs a no op call for the heal(address)uint64 ABI method
   *
   * Heal action to restore HP to the boss.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static heal(params: CallParams<AresBattleArgs['obj']['heal(address)uint64'] | AresBattleArgs['tuple']['heal(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'heal(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the nuke(address)uint64 ABI method
   *
   * Nuke action to inflict damage to the boss.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static nuke(params: CallParams<AresBattleArgs['obj']['nuke(address)uint64'] | AresBattleArgs['tuple']['nuke(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'nuke(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the distributeRewards()void ABI method
   *
   * Distribute rewards when the boss is defeated.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeRewards(params: CallParams<AresBattleArgs['obj']['distributeRewards()void'] | AresBattleArgs['tuple']['distributeRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distributeRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AresBattle smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AresBattleFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AresBattleFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AresBattleClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AresBattleClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AresBattle smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AresBattleDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AresBattleParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
      deleteParams: params.deleteParams?.method ? AresBattleParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams,
    })
    return { result: result.result, appClient: new AresBattleClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AresBattle smart contract using the createApplication(uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AresBattleParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the AresBattle smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<AresBattleArgs['obj']['deleteApplication()void'] | AresBattleArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(AresBattleParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AresBattle smart contract using the createApplication(uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AresBattleParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AresBattle smart contract using an ABI method call using the createApplication(uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AresBattleArgs['obj']['createApplication(uint64,string)void'] | AresBattleArgs['tuple']['createApplication(uint64,string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AresBattleParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as undefined | AresBattleReturns['createApplication(uint64,string)void'] }, appClient: new AresBattleClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AresBattle smart contract
 */
export class AresBattleClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AresBattleClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AresBattle app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AresBattleClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AresBattleNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AresBattleClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AresBattleClient> {
    return new AresBattleClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AresBattleClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AresBattleClient> {
    return new AresBattleClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AresBattle smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<AresBattleArgs['obj']['deleteApplication()void'] | AresBattleArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(AresBattleParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AresBattle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AresBattle smart contract using the `slash(address,pay,uint64)uint64` ABI method.
     *
     * Slash action to damage the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The actual damage dealt.
     */
    slash: (params: CallParams<AresBattleArgs['obj']['slash(address,pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(address,pay,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AresBattleParamsFactory.slash(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `heal(address)uint64` ABI method.
     *
     * Heal action to restore HP to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The amount healed.
     */
    heal: (params: CallParams<AresBattleArgs['obj']['heal(address)uint64'] | AresBattleArgs['tuple']['heal(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AresBattleParamsFactory.heal(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `nuke(address)uint64` ABI method.
     *
     * Nuke action to inflict damage to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The actual damage dealt.
     */
    nuke: (params: CallParams<AresBattleArgs['obj']['nuke(address)uint64'] | AresBattleArgs['tuple']['nuke(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AresBattleParamsFactory.nuke(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `distributeRewards()void` ABI method.
     *
     * Distribute rewards when the boss is defeated.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeRewards: (params: CallParams<AresBattleArgs['obj']['distributeRewards()void'] | AresBattleArgs['tuple']['distributeRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AresBattleParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AresBattle smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<AresBattleArgs['obj']['deleteApplication()void'] | AresBattleArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(AresBattleParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AresBattle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AresBattle smart contract using the `slash(address,pay,uint64)uint64` ABI method.
     *
     * Slash action to damage the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The actual damage dealt.
     */
    slash: (params: CallParams<AresBattleArgs['obj']['slash(address,pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(address,pay,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AresBattleParamsFactory.slash(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `heal(address)uint64` ABI method.
     *
     * Heal action to restore HP to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The amount healed.
     */
    heal: (params: CallParams<AresBattleArgs['obj']['heal(address)uint64'] | AresBattleArgs['tuple']['heal(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AresBattleParamsFactory.heal(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `nuke(address)uint64` ABI method.
     *
     * Nuke action to inflict damage to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The actual damage dealt.
     */
    nuke: (params: CallParams<AresBattleArgs['obj']['nuke(address)uint64'] | AresBattleArgs['tuple']['nuke(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AresBattleParamsFactory.nuke(params))
    },

    /**
     * Makes a call to the AresBattle smart contract using the `distributeRewards()void` ABI method.
     *
     * Distribute rewards when the boss is defeated.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeRewards: (params: CallParams<AresBattleArgs['obj']['distributeRewards()void'] | AresBattleArgs['tuple']['distributeRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AresBattleParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AresBattle smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<AresBattleArgs['obj']['deleteApplication()void'] | AresBattleArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(AresBattleParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as undefined | AresBattleReturns['deleteApplication()void']}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AresBattle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AresBattle smart contract using the `slash(address,pay,uint64)uint64` ABI method.
     *
     * Slash action to damage the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The actual damage dealt.
     */
    slash: async (params: CallParams<AresBattleArgs['obj']['slash(address,pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(address,pay,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AresBattleParamsFactory.slash(params))
      return {...result, return: result.return as undefined | AresBattleReturns['slash(address,pay,uint64)uint64']}
    },

    /**
     * Makes a call to the AresBattle smart contract using the `heal(address)uint64` ABI method.
     *
     * Heal action to restore HP to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The amount healed.
     */
    heal: async (params: CallParams<AresBattleArgs['obj']['heal(address)uint64'] | AresBattleArgs['tuple']['heal(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AresBattleParamsFactory.heal(params))
      return {...result, return: result.return as undefined | AresBattleReturns['heal(address)uint64']}
    },

    /**
     * Makes a call to the AresBattle smart contract using the `nuke(address)uint64` ABI method.
     *
     * Nuke action to inflict damage to the boss.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The actual damage dealt.
     */
    nuke: async (params: CallParams<AresBattleArgs['obj']['nuke(address)uint64'] | AresBattleArgs['tuple']['nuke(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AresBattleParamsFactory.nuke(params))
      return {...result, return: result.return as undefined | AresBattleReturns['nuke(address)uint64']}
    },

    /**
     * Makes a call to the AresBattle smart contract using the `distributeRewards()void` ABI method.
     *
     * Distribute rewards when the boss is defeated.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeRewards: async (params: CallParams<AresBattleArgs['obj']['distributeRewards()void'] | AresBattleArgs['tuple']['distributeRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AresBattleParamsFactory.distributeRewards(params))
      return {...result, return: result.return as undefined | AresBattleReturns['distributeRewards()void']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AresBattleClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AresBattle app
   */
  state = {
    /**
     * Methods to access global state for the current AresBattle app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          bossHp: result.bossHP,
          bossTotalHp: result.bossTotalHP,
          totalPool: result.totalPool,
          governor: new BinaryStateValue(result.governor),
          bossName: new BinaryStateValue(result.bossName),
          bossState: new BinaryStateValue(result.bossState),
          contractVersion: new BinaryStateValue(result.contractVersion),
        }
      },
      /**
       * Get the current value of the bossHP key in global state
       */
      bossHp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("bossHp")) as bigint | undefined },
      /**
       * Get the current value of the bossTotalHP key in global state
       */
      bossTotalHp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("bossTotalHp")) as bigint | undefined },
      /**
       * Get the current value of the totalPool key in global state
       */
      totalPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalPool")) as bigint | undefined },
      /**
       * Get the current value of the governor key in global state
       */
      governor: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("governor")) as Uint8Array | undefined) },
      /**
       * Get the current value of the bossName key in global state
       */
      bossName: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bossName")) as Uint8Array | undefined) },
      /**
       * Get the current value of the bossState key in global state
       */
      bossState: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bossState")) as Uint8Array | undefined) },
      /**
       * Get the current value of the contractVersion key in global state
       */
      contractVersion: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("contractVersion")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): AresBattleComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a slash(address,pay,uint64)uint64 method call against the AresBattle contract
       */
      slash(params: CallParams<AresBattleArgs['obj']['slash(address,pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(address,pay,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.slash(params)))
        resultMappers.push((v) => client.decodeReturnValue('slash(address,pay,uint64)uint64', v))
        return this
      },
      /**
       * Add a heal(address)uint64 method call against the AresBattle contract
       */
      heal(params: CallParams<AresBattleArgs['obj']['heal(address)uint64'] | AresBattleArgs['tuple']['heal(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.heal(params)))
        resultMappers.push((v) => client.decodeReturnValue('heal(address)uint64', v))
        return this
      },
      /**
       * Add a nuke(address)uint64 method call against the AresBattle contract
       */
      nuke(params: CallParams<AresBattleArgs['obj']['nuke(address)uint64'] | AresBattleArgs['tuple']['nuke(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.nuke(params)))
        resultMappers.push((v) => client.decodeReturnValue('nuke(address)uint64', v))
        return this
      },
      /**
       * Add a distributeRewards()void method call against the AresBattle contract
       */
      distributeRewards(params: CallParams<AresBattleArgs['obj']['distributeRewards()void'] | AresBattleArgs['tuple']['distributeRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<AresBattleArgs['obj']['deleteApplication()void'] | AresBattleArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the AresBattle contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AresBattleComposer
  }
}
export type AresBattleComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the slash(address,pay,uint64)uint64 ABI method.
   *
   * Slash action to damage the boss.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  slash(params?: CallParams<AresBattleArgs['obj']['slash(address,pay,uint64)uint64'] | AresBattleArgs['tuple']['slash(address,pay,uint64)uint64']>): AresBattleComposer<[...TReturns, AresBattleReturns['slash(address,pay,uint64)uint64'] | undefined]>

  /**
   * Calls the heal(address)uint64 ABI method.
   *
   * Heal action to restore HP to the boss.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  heal(params?: CallParams<AresBattleArgs['obj']['heal(address)uint64'] | AresBattleArgs['tuple']['heal(address)uint64']>): AresBattleComposer<[...TReturns, AresBattleReturns['heal(address)uint64'] | undefined]>

  /**
   * Calls the nuke(address)uint64 ABI method.
   *
   * Nuke action to inflict damage to the boss.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nuke(params?: CallParams<AresBattleArgs['obj']['nuke(address)uint64'] | AresBattleArgs['tuple']['nuke(address)uint64']>): AresBattleComposer<[...TReturns, AresBattleReturns['nuke(address)uint64'] | undefined]>

  /**
   * Calls the distributeRewards()void ABI method.
   *
   * Distribute rewards when the boss is defeated.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeRewards(params?: CallParams<AresBattleArgs['obj']['distributeRewards()void'] | AresBattleArgs['tuple']['distributeRewards()void']>): AresBattleComposer<[...TReturns, AresBattleReturns['distributeRewards()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the AresBattle smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<AresBattleArgs['obj']['deleteApplication()void'] | AresBattleArgs['tuple']['deleteApplication()void']>): AresBattleComposer<[...TReturns, AresBattleReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AresBattle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AresBattleComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AresBattleComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AresBattleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AresBattleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AresBattleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AresBattleComposerResults<TReturns>>
}
export type AresBattleComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

