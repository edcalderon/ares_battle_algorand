/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint16,string)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addAToAllowList(address,string,uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAllowlist(address,string,uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateLendigRate(uint16)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getWalletQuota(address)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "borrow(uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLendingState(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g"
        },
        "assetA": {
          "type": "uint64",
          "key": "a"
        },
        "poolLendingRate": {
          "type": "bytes",
          "key": "r"
        },
        "poolName": {
          "type": "bytes",
          "key": "n"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "LendingPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "rate",
            "type": "uint16"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "seed",
            "type": "pay"
          },
          {
            "name": "aAsset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addAToAllowList",
        "args": [
          {
            "name": "wallet",
            "type": "address"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "quota",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "updateAllowlist",
        "args": [
          {
            "name": "wallet",
            "type": "address"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "quota",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "updateLendigRate",
        "args": [
          {
            "name": "rate",
            "type": "uint16"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "getWalletQuota",
        "args": [
          {
            "name": "wallet",
            "type": "address"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "borrow",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "getLendingState",
        "args": [
          {
            "name": "wallet",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the LendingPool smart contract.
 */
export type LendingPool = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint16,string)void' | 'createApplication', {
      argsObj: {
        rate: number
        name: string
      }
      argsTuple: [rate: number, name: string]
      returns: void
    }>
    & Record<'bootstrap(pay,uint64)void' | 'bootstrap', {
      argsObj: {
        seed: TransactionToSign | Transaction | Promise<SendTransactionResult>
        aAsset: bigint | number
      }
      argsTuple: [seed: TransactionToSign | Transaction | Promise<SendTransactionResult>, aAsset: bigint | number]
      returns: void
    }>
    & Record<'addAToAllowList(address,string,uint64)string' | 'addAToAllowList', {
      argsObj: {
        wallet: string
        name: string
        quota: bigint | number
      }
      argsTuple: [wallet: string, name: string, quota: bigint | number]
      returns: string
    }>
    & Record<'updateAllowlist(address,string,uint64)string' | 'updateAllowlist', {
      argsObj: {
        wallet: string
        name: string
        quota: bigint | number
      }
      argsTuple: [wallet: string, name: string, quota: bigint | number]
      returns: string
    }>
    & Record<'updateLendigRate(uint16)string' | 'updateLendigRate', {
      argsObj: {
        rate: number
      }
      argsTuple: [rate: number]
      returns: string
    }>
    & Record<'getWalletQuota(address)string' | 'getWalletQuota', {
      argsObj: {
        wallet: string
      }
      argsTuple: [wallet: string]
      returns: string
    }>
    & Record<'borrow(uint64)string' | 'borrow', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: string
    }>
    & Record<'getLendingState(address)uint64' | 'getLendingState', {
      argsObj: {
        wallet: string
      }
      argsTuple: [wallet: string]
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'g'?: BinaryState
      'a'?: IntegerState
      'r'?: BinaryState
      'n'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type LendingPoolSig = keyof LendingPool['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends LendingPoolSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the LendingPool smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends LendingPoolSig> = LendingPool['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LendingPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LendingPoolSig> = LendingPool['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type LendingPoolCreateCalls = (typeof LendingPoolCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type LendingPoolCreateCallParams =
  | (TypedCallParams<'createApplication(uint16,string)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type LendingPoolDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: LendingPoolCreateCalls) => LendingPoolCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class LendingPoolCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the LendingPool smart contract using the createApplication(uint16,string)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint16,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint16,string)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.rate, args.name],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.seed, args.aAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addAToAllowList(address,string,uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addAToAllowList(args: MethodArgs<'addAToAllowList(address,string,uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addAToAllowList(address,string,uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.wallet, args.name, args.quota],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateAllowlist(address,string,uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateAllowlist(args: MethodArgs<'updateAllowlist(address,string,uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateAllowlist(address,string,uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.wallet, args.name, args.quota],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateLendigRate(uint16)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateLendigRate(args: MethodArgs<'updateLendigRate(uint16)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateLendigRate(uint16)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.rate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getWalletQuota(address)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getWalletQuota(args: MethodArgs<'getWalletQuota(address)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getWalletQuota(address)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.wallet],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the borrow(uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static borrow(args: MethodArgs<'borrow(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'borrow(uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getLendingState(address)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLendingState(args: MethodArgs<'getLendingState(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getLendingState(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.wallet],
      ...params,
    }
  }
}

/**
 * A client to make calls to the LendingPool smart contract
 */
export class LendingPoolClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `LendingPoolClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof LendingPool['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the LendingPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: LendingPoolDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(LendingPoolCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the LendingPool smart contract using the createApplication(uint16,string)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint16,string)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint16,string)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(LendingPoolCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the LendingPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LendingPoolCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the addAToAllowList(address,string,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addAToAllowList(args: MethodArgs<'addAToAllowList(address,string,uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LendingPoolCallFactory.addAToAllowList(args, params))
  }

  /**
   * Calls the updateAllowlist(address,string,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateAllowlist(args: MethodArgs<'updateAllowlist(address,string,uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LendingPoolCallFactory.updateAllowlist(args, params))
  }

  /**
   * Calls the updateLendigRate(uint16)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateLendigRate(args: MethodArgs<'updateLendigRate(uint16)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LendingPoolCallFactory.updateLendigRate(args, params))
  }

  /**
   * Calls the getWalletQuota(address)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getWalletQuota(args: MethodArgs<'getWalletQuota(address)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LendingPoolCallFactory.getWalletQuota(args, params))
  }

  /**
   * Calls the borrow(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public borrow(args: MethodArgs<'borrow(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LendingPoolCallFactory.borrow(args, params))
  }

  /**
   * Calls the getLendingState(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLendingState(args: MethodArgs<'getLendingState(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LendingPoolCallFactory.getLendingState(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<LendingPool['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get g() {
        return LendingPoolClient.getBinaryState(state, 'g')
      },
      get a() {
        return LendingPoolClient.getIntegerState(state, 'a')
      },
      get r() {
        return LendingPoolClient.getBinaryState(state, 'r')
      },
      get n() {
        return LendingPoolClient.getBinaryState(state, 'n')
      },
    }
  }

  public compose(): LendingPoolComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addAToAllowList(args: MethodArgs<'addAToAllowList(address,string,uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addAToAllowList(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateAllowlist(args: MethodArgs<'updateAllowlist(address,string,uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateAllowlist(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateLendigRate(args: MethodArgs<'updateLendigRate(uint16)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateLendigRate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getWalletQuota(args: MethodArgs<'getWalletQuota(address)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getWalletQuota(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      borrow(args: MethodArgs<'borrow(uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.borrow(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLendingState(args: MethodArgs<'getLendingState(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLendingState(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as LendingPoolComposer
  }
}
export type LendingPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): LendingPoolComposer<[...TReturns, MethodReturn<'bootstrap(pay,uint64)void'>]>

  /**
   * Calls the addAToAllowList(address,string,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addAToAllowList(args: MethodArgs<'addAToAllowList(address,string,uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): LendingPoolComposer<[...TReturns, MethodReturn<'addAToAllowList(address,string,uint64)string'>]>

  /**
   * Calls the updateAllowlist(address,string,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAllowlist(args: MethodArgs<'updateAllowlist(address,string,uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): LendingPoolComposer<[...TReturns, MethodReturn<'updateAllowlist(address,string,uint64)string'>]>

  /**
   * Calls the updateLendigRate(uint16)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateLendigRate(args: MethodArgs<'updateLendigRate(uint16)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): LendingPoolComposer<[...TReturns, MethodReturn<'updateLendigRate(uint16)string'>]>

  /**
   * Calls the getWalletQuota(address)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getWalletQuota(args: MethodArgs<'getWalletQuota(address)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): LendingPoolComposer<[...TReturns, MethodReturn<'getWalletQuota(address)string'>]>

  /**
   * Calls the borrow(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  borrow(args: MethodArgs<'borrow(uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): LendingPoolComposer<[...TReturns, MethodReturn<'borrow(uint64)string'>]>

  /**
   * Calls the getLendingState(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLendingState(args: MethodArgs<'getLendingState(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): LendingPoolComposer<[...TReturns, MethodReturn<'getLendingState(address)uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the LendingPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): LendingPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): LendingPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<LendingPoolComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<LendingPoolComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type LendingPoolComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type LendingPoolComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
